package com.mycompany.proyectoplanilla;

import com.mycompany.proyectoplanilla.DatabaseConnection;
import com.opencsv.CSVParserBuilder;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvValidationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Walter Morales
 */
public class VGestionPlanilla extends javax.swing.JFrame {

    /**
     * Creates new form VGestionPlanilla
     */
    public VGestionPlanilla() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        JtNo = new javax.swing.JTextField();
        BtBuscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        LbNombre = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JtableCsv = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("GESTION DE PLANILLAS");
        jLabel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Cargar .csv");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Confirmar Carga");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("No. Patrono:");

        BtBuscar.setText("Buscar");
        BtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtBuscarActionPerformed(evt);
            }
        });

        jLabel3.setText("Nombre Empresa:");

        JtableCsv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Corporativo", "Nombre", "Periodo", "Salario", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(JtableCsv);

        jButton5.setText("Ver Reporte");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(16, 16, 16))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(9, 9, 9)
                                    .addComponent(jButton2))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(22, 22, 22)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(JtNo, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(BtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(LbNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGap(37, 37, 37)))
                    .addComponent(jButton5)))
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtBuscar)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JtNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtBuscarActionPerformed
        String codigoEmpresa = JtNo.getText();
        try (Connection connection = DatabaseConnection.getConnection()) {
            String sql = "SELECT nombre FROM empresas WHERE codigo = ?";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, codigoEmpresa);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        String nombreEmpresa = resultSet.getString("nombre");
                        LbNombre.setText(nombreEmpresa);
                    } else {
                        LbNombre.setText("Empresa no encontrada, debe inscribirla antes de continuar");
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            LbNombre.setText("Error al buscar la empresa.");
        }

    }//GEN-LAST:event_BtBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try (CSVReader reader = new CSVReaderBuilder(new FileReader(selectedFile))
                    .withCSVParser(new CSVParserBuilder().withSeparator(',').build())
                    .build()) {
                String[] line;
                DefaultTableModel tableModel = (DefaultTableModel) JtableCsv.getModel();
                tableModel.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

                // Leer y descartar la primera línea (encabezados)
                reader.readNext();

                // Leer las líneas restantes y agregarlas a la tabla
                while ((line = reader.readNext()) != null) {
                    // Convertir cada elemento de la línea a String
                    String[] rowData = new String[line.length];
                    for (int i = 0; i < line.length; i++) {
                        rowData[i] = line[i];
                    }
                    tableModel.addRow(rowData);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al leer el archivo CSV: " + ex.getMessage());
            } catch (CsvValidationException ex) {
                Logger.getLogger(VGestionPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    Connection connection = null;
    PreparedStatement psPlanillas = null;
    PreparedStatement psCheckPlanilla = null;
    PreparedStatement psCheckEmpleado = null;
    PreparedStatement psInsertEmpleado = null;
    PreparedStatement psCheckEstadoAnterior = null;

    try {
        connection = DatabaseConnection.getConnection();
        connection.setAutoCommit(false);

        String sqlPlanillas = "INSERT INTO planillas (id, empresa_codigo, empleado_codigo, periodo, sueldo, estado) VALUES (planillas_seq.NEXTVAL, ?, ?, TO_DATE(?, 'YYYY-MM-DD'), ?, ?)";
        String sqlCheckPlanilla = "SELECT 1 FROM planillas WHERE empresa_codigo = ? AND empleado_codigo = ? AND periodo = TO_DATE(?, 'YYYY-MM-DD')";
        String sqlCheckEmpleado = "SELECT 1 FROM empleados WHERE codigo = ?";
        String sqlInsertEmpleado = "INSERT INTO empleados (codigo, nombre) VALUES (?, ?)";
        String sqlCheckEstadoAnterior = "SELECT estado FROM planillas WHERE empleado_codigo = ? ORDER BY periodo DESC FETCH FIRST 1 ROWS ONLY";

        psPlanillas = connection.prepareStatement(sqlPlanillas);
        psCheckPlanilla = connection.prepareStatement(sqlCheckPlanilla);
        psCheckEmpleado = connection.prepareStatement(sqlCheckEmpleado);
        psInsertEmpleado = connection.prepareStatement(sqlInsertEmpleado);
        psCheckEstadoAnterior = connection.prepareStatement(sqlCheckEstadoAnterior);

        DefaultTableModel tableModel = (DefaultTableModel) JtableCsv.getModel();
        int rowCount = tableModel.getRowCount();

        int empresaCodigo = Integer.parseInt(JtNo.getText());
        System.out.println("Empresa Código: " + empresaCodigo);

        // Primera fase: Validaciones
        for (int i = 0; i < rowCount; i++) {
            int empleadoCodigo = Integer.parseInt(tableModel.getValueAt(i, 0).toString());
            String periodo = tableModel.getValueAt(i, 2).toString();
            String estado = tableModel.getValueAt(i, 4).toString();

            System.out.println("Validando fila: " + (i + 1));
            System.out.println("Empleado Código: " + empleadoCodigo);
            System.out.println("Periodo: " + periodo);

            // Validar que no se cargue la misma planilla de la misma empresa, empleado y periodo
            psCheckPlanilla.setInt(1, empresaCodigo);
            psCheckPlanilla.setInt(2, empleadoCodigo);
            psCheckPlanilla.setString(3, periodo);
            ResultSet rsPlanilla = psCheckPlanilla.executeQuery();
            if (rsPlanilla.next()) {
                System.out.println("Planilla ya existe para empresa " + empresaCodigo + ", empleado " + empleadoCodigo + " y periodo " + periodo);
                JOptionPane.showMessageDialog(null, "Error: La planilla de la empresa " + empresaCodigo + ", empleado " + empleadoCodigo + " para el periodo " + periodo + " ya existe.");
                return;
            }

            // Validar el estado anterior del empleado
            psCheckEstadoAnterior.setInt(1, empleadoCodigo);
            ResultSet rsEstadoAnterior = psCheckEstadoAnterior.executeQuery();
            if (rsEstadoAnterior.next()) {
                String estadoAnterior = rsEstadoAnterior.getString("estado");
                System.out.println("Estado anterior del empleado " + empleadoCodigo + ": " + estadoAnterior);
                if (estado.equals("N") && !estadoAnterior.equals("A")) {
                    System.out.println("Error: El estado 'N' no puede ser cargado sin un estado 'A' anterior para el empleado " + empleadoCodigo);
                    JOptionPane.showMessageDialog(null, "Error: El estado 'N' no puede ser cargado sin un estado 'A' anterior para el empleado " + empleadoCodigo);
                    return;
                }
            } else if (estado.equals("N")) {
                System.out.println("Error: El estado 'N' no puede ser cargado sin un estado 'A' anterior para el empleado " + empleadoCodigo);
                JOptionPane.showMessageDialog(null, "Error: El estado 'N' no puede ser cargado sin un estado 'A' anterior para el empleado " + empleadoCodigo);
                return;
            }
        }

        // Segunda fase: Inserciones
        for (int i = 0; i < rowCount; i++) {
            int empleadoCodigo = Integer.parseInt(tableModel.getValueAt(i, 0).toString());
            String empleadoNombre = tableModel.getValueAt(i, 1).toString();
            String periodo = tableModel.getValueAt(i, 2).toString();
            double sueldo = Double.parseDouble(tableModel.getValueAt(i, 3).toString());
            String estado = tableModel.getValueAt(i, 4).toString();

            System.out.println("Insertando fila: " + (i + 1));
            System.out.println("Empleado Código: " + empleadoCodigo);
            System.out.println("Periodo: " + periodo);

            // Verificar si el empleado existe
            psCheckEmpleado.setInt(1, empleadoCodigo);
            ResultSet rsEmpleado = psCheckEmpleado.executeQuery();
            if (!rsEmpleado.next()) {
                // Insertar en la tabla empleados si no existe
                System.out.println("Insertando empleado: " + empleadoCodigo + ", Nombre: " + empleadoNombre);
                psInsertEmpleado.setInt(1, empleadoCodigo);
                psInsertEmpleado.setString(2, empleadoNombre);
                psInsertEmpleado.executeUpdate();
            }

            // Configurar los parámetros del PreparedStatement para la tabla planillas
            psPlanillas.setInt(1, empresaCodigo);
            psPlanillas.setInt(2, empleadoCodigo);
            psPlanillas.setString(3, periodo); // Asegúrate de que el formato de fecha sea correcto
            psPlanillas.setDouble(4, sueldo);
            psPlanillas.setString(5, estado);

            psPlanillas.executeUpdate();
        }

        connection.commit();
        JOptionPane.showMessageDialog(null, "Datos cargados exitosamente a la base de datos.");
    } catch (SQLException ex) {
        ex.printStackTrace();
        try {
            if (connection != null) {
                connection.rollback();
            }
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + ex.getMessage());
    } finally {
        try {
            if (psPlanillas != null) {
                psPlanillas.close();
            }
            if (psCheckPlanilla != null) {
                psCheckPlanilla.close();
            }
            if (psCheckEmpleado != null) {
                psCheckEmpleado.close();
            }
            if (psInsertEmpleado != null) {
                psInsertEmpleado.close();
            }
            if (psCheckEstadoAnterior != null) {
                psCheckEstadoAnterior.close();
            }
            if (connection != null) {
                connection.setAutoCommit(true);
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }


    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VGestionPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VGestionPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VGestionPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VGestionPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VGestionPlanilla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtBuscar;
    private javax.swing.JTextField JtNo;
    private javax.swing.JTable JtableCsv;
    private javax.swing.JLabel LbNombre;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
